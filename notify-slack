#!/usr/bin/env python

import optparse
import os
import json
import sys

import requests

NOTIFICATION_EMOJI = {
    'PROBLEM':           ':scream:',
    'RECOVERY':          ':smiley:',
    'ACKNOWLEDGEMENT':   ':wrench:',
    'FLAPPINGSTART':     ':checkered_flag:',
    'FLAPPINGSTOP':      ':end:',
    'FLAPPINGDISABLED':  ':wrench:',
    'DOWNTIMESTART':     ':construction:',
    'DOWNTIMEEND':       ':construction:',
    'DOWNTIMECANCELLED': ':construction:',
    'CUSTOM':            ':alien:',
}

STATUS_COLORS = {
    'WARNING':  '#FFFF00',
    'CRITICAL': '#FF0000',
    'UNKNOWN':  '#FFAA00',
}
NOTIFICATION_COLORS = {
    'RECOVERY':          '#00CC00',
    'ACKNOWLEDGEMENT':   '#1240AB',
    'FLAPPINGSTART':     '#000000',
    'FLAPPINGSTOP':      '#000000',
    'FLAPPINGDISABLED':  '#000000',
    'DOWNTIMESTART':     '#999999',
    'DOWNTIMEEND':       '#999999',
    'DOWNTIMECANCELLED': '#999999',
    'CUSTOM':            '#7109AA',
}

NOTIFICATION_STATUSES = {
    'FLAPPINGSTART':     'Service has begun flapping (notifications disabled).',
    'FLAPPINGSTOP':      'Service has stopped flapping (notifications enabled).',
    'FLAPPINGDISABLED':  'Flap detection has been turned off (notifications enabled).',
    'DOWNTIMESTART':     'Now in scheduled downtime (notifications disabled).',
    'DOWNTIMEEND':       'Scheduled downtime finished (notifications enabled).',
    'DOWNTIMECANCELLED': 'Scheduled downtime cancelled early (notifications enabled).',
    'CUSTOM':            '',
}

def check_option(name, value):
    if value is None:
        print >>sys.stderr, 'No {} given.'.format(name)
        exit(1)
        
def add_param(payload, key, value):
    if value is not None:
        payload[key] = value

parser = optparse.OptionParser()
parser.add_option('-W', '--webhook', help='Webhook URL to use.  Overrides WEBHOOK environment variable.')
parser.add_option('-C', '--channel')
parser.add_option('-U', '--username')
parser.add_option('-I', '--icon', help='Must be a valid emoji string.')
parser.add_option('-t', '--notification-type')
parser.add_option('-a', '--host-alias')
parser.add_option('-d', '--service-desc')
parser.add_option('-w', '--time', type='int', help='Epoch seconds (use $TIMET$)')
parser.add_option('-s', '--state')
parser.add_option('-o', '--output')
parser.add_option('-l', '--long-output')
parser.add_option('-u', '--ack-author')
parser.add_option('-c', '--ack-comment')
parser.add_option('-n', '--notification-comment')
parser.add_option(      '--debug', action='store_true')
(options, args) = parser.parse_args()

if options.webhook is None:
    if 'WEBHOOK' in os.environ:
        options.webhook = os.environ['WEBHOOK']
    else:
        print >>sys.stderr, 'No webhook given.'
        exit(1)

check_option('notification type', options.notification_type)    
check_option('host alias', options.host_alias)

attachment = {}
payload = {'attachments': [attachment]}
add_param(payload, 'channel', options.channel)
add_param(payload, 'username', options.username)
add_param(payload, 'icon_emoji', options.icon)

## Message text - Just the type of notification and an appropriate emoji.
if options.notification_type in NOTIFICATION_EMOJI:
    payload['text'] = '{0} {1}'.format(options.notification_type, NOTIFICATION_EMOJI[options.notification_type])
else:
    payload['text'] = options.notification_type

## Attachment color
if options.notification_type in NOTIFICATION_COLORS:
    attachment['color'] = NOTIFICATION_COLORS[options.notification_type]
elif options.notification_type == 'PROBLEM' and options.state in STATUS_COLORS:
    attachment['color'] = STATUS_COLORS[options.state]

## Attachment title - equivalent to email subject
if options.service_desc is not None:
    attachment['title'] = '{0} / {1}'.format(options.host_alias, options.service_desc)
else:
    attachment['title'] = options.host_alias

## Attachment text - equivalent to email body
if options.notification_type in NOTIFICATION_STATUSES:
    attachment['text'] = NOTIFICATION_STATUSES[options.notification_type]
else:
    attachment['title'] += ' is {0}'.format(options.state)
    attachment['text'] = options.output
    if options.long_output is not None and options.long_output != '':
        attachment['text'] += "\n"
        attachment['text'] += options.long_output

## Attachment fallback - If atachment formatting isn't supported.
attachment['fallback'] = attachment['title'] + "\n" + attachment['text']

## Additional fields for acknowledgements; who ACKed and what they said.
if options.notification_type == 'ACKNOWLEDGEMENT':
    attachment['fields'] = [
        {'title': 'Handled By', 'value': options.ack_author,  'short': False},
        {'title': 'Comment',    'value': options.ack_comment, 'short': False},
    ]
    attachment['fallback'] += "\nHandled By {0}: {1}".format(options.ack_author, options.ack_comment)
elif options.notification_comment is not None and options.notification_comment != '':
    attachment['fields'] = [
        {'title': 'Comment', 'value': options.notification_comment, 'short': False},
    ]
    
## Attachment time - When the notification was generated.
if options.time is not None:
    attachment['ts'] = options.time
    
if options.debug:
    attachment['pretext'] = 'This is a test message.  Please ignore it.'

if options.debug:
    print json.dumps(payload)
r = requests.post(options.webhook, json=payload)
r.raise_for_status()
